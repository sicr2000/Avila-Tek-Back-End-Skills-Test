{
  "openapi": "3.0.3",
  "info": {
    "title": "Avila Tek Back-End Skills Test",
    "description": "Avila Tek Back-End Skills Test",
    "termsOfService": "",
    "contact": {
      "email": "sebastiancastrorajbe@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://localhost:3002/apidocs"
    }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Everything about your Users"
    },
    {
      "name": "Products",
      "description": "Everything about your Products"
    },
    {
      "name": "Customers",
      "description": "Everything about your Customers"
    },
    {
      "name": "Drivers",
      "description": "Everything about your Drivers"
    },
    {
      "name": "Orders",
      "description": "Everything about your Orders"
    }
  ],
  "paths": {
    "/users/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a list of all users",
        "description": "Get information about an especific user",
        "operationId": "get_users",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user",
        "description": "Create a new user in the database",
        "operationId": "create_user",
        "requestBody": {
          "description": "Create a new user in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequiredBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A user has been created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreated"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/user/<int:user_id>": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get an especific user",
        "description": "Get information about an especific user",
        "operationId": "get_user",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleUser2"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserErr404"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Update an user",
        "description": "Update the data from an user in the database",
        "operationId": "update_user",
        "requestBody": {
          "description": "Update the data from an user in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExampleUser1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A user has been updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdated"
                }
              }
            }
          },
          "404": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserErr404"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete an user",
        "description": "Delete an user from the database",
        "operationId": "delete_user",
        "responses": {
          "200": {
            "description": "The user has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDeleted"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteUserErr404"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/token": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new token",
        "description": "Create a new token authorization to login into an user account",
        "operationId": "create_token",
        "requestBody": {
          "description": "Create a new token authorization to login into an user account",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Token Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "401": {
            "description": "User doesn't exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenErr401"
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Returns a list of all products",
        "description": "Return a list of all products created in the database",
        "operationId": "load_products",
        "responses": {
          "200": {
            "description": "Returns \"results\", \"total\", \"total_pages\", \"page\"",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/products/new_product": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Returns a list of all products",
        "description": "Return a list of all products created in the database",
        "operationId": "create_product",
        "requestBody": {
          "description": "Return a list of all products created in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProduct"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Return new product created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Request body missing name or price",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProductErr400"
                }
              }
            }
          },
          "500": {
            "description": "An error occured during product creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProductErr500"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/products/<int:product_id>": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update an especific product",
        "description": "Update an especific product in the database",
        "operationId": "update_product",
        "requestBody": {
          "description": "Update an especific product in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProduct"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Product update successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductUpdated"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete an especific product",
        "description": "Delete an especific product in the database",
        "operationId": "delete_product",
        "responses": {
          "200": {
            "description": "Product deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDeleted"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteProductErr404"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/customers/new_customer": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a new customer",
        "description": "Create a new customer in database",
        "operationId": "create_customer",
        "requestBody": {
          "description": "Create a new customer in database in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequiredBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          }
        }
      }
    },
    "/drivers/new_driver": {
      "post": {
        "tags": [
          "Drivers"
        ],
        "summary": "Create a new driver",
        "description": "Create a new driver in database",
        "operationId": "create_driver",
        "requestBody": {
          "description": "Create a new driver in database in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DriverRequiredBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Driver created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Driver"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all orders",
        "description": "Get all orders in database",
        "operationId": "get_all_orders",
        "responses": {
          "200": {
            "description": "Return a list of all orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Orders"
                }
              }
            }
          },
          "500": {
            "description": "Failed to retrive orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrdersErr500"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/orders/new_order": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new order",
        "description": "Create a new order in database",
        "operationId": "new_order",
        "requestBody": {
          "description": "Create a new driver in database in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequiredBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "New order created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "500": {
            "description": "Something go wrong or something is missing or incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrderErr500"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Sebastián"
          },
          "lastname": {
            "type": "string",
            "example": "Castro"
          },
          "email": {
            "type": "string",
            "example": "sebastiancastrorajbe@gmail.com"
          }
        }
      },
      "CreateUserRequiredBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Jose"
          },
          "lastname": {
            "type": "string",
            "example": "Rajbe"
          },
          "email": {
            "type": "string",
            "example": "joserajbe@gmail.com"
          },
          "password": {
            "type": "string",
            "example": 123456
          }
        }
      },
      "UserCreated": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "joserajbe@gmail.com"
          },
          "message": {
            "type": "string",
            "example": "A user has been created"
          }
        }
      },
      "UserDeleted": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "pedroperez@gmail has been deleted"
          }
        }
      },
      "UserUpdated": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "A user has been updated"
          },
          "email": {
            "type": "string",
            "example": "sebastiancastrorajbe@gmail.com"
          }
        }
      },
      "Users": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ExampleUser1"
        }
      },
      "ExampleUser1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Sebastián"
          },
          "lastname": {
            "type": "string",
            "example": "Castro"
          },
          "email": {
            "type": "string",
            "example": "sebastiancastrorajbe@gmail.com"
          }
        }
      },
      "ExampleUser2": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "joserajbe@gmail.com"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "lastname": {
            "type": "string",
            "example": "Rajbe"
          },
          "name": {
            "type": "string",
            "example": "José"
          }
        }
      },
      "Login": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "sebastiancastrorajbe@gmail.com"
          },
          "password": {
            "type": "string",
            "example": 123456
          }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Token created"
          },
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMTMwMTM3MiwianRpIjoiZDhiNGFjZGUtNWE1Ny00MGM3LWIzOTktNmMwM2IzYjRkNDgwIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InNlYmFzdGlhbmNhc3Ryb3JhamJlQGdtYWlsLmNvbSIsIm5iZiI6MTcxMTMwMTM3MiwiZXhwIjoxNzExMzg3NzcyfQ.SqAJQPanvmJPR1JpcnJpggif6cvMd_WJO_j5yxVzzxE"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "iPhone 14 Pro Max"
          },
          "description": {
            "type": "string",
            "example": "Gold 512 GB"
          },
          "image": {
            "type": "string",
            "example": "https://pimcdn.sharafdg.com/cdn-cgi/image/width=600,height=600,fit=pad/images/IPHONE14PROMAX_gold_1?1705054846"
          },
          "amount": {
            "type": "integer",
            "example": 1
          },
          "price": {
            "type": "number",
            "example": 1499
          }
        }
      },
      "NewProduct": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "iPhone 14 Pro Max"
          },
          "description": {
            "type": "string",
            "example": "Gold 512 GB"
          },
          "image": {
            "type": "string",
            "example": "https://pimcdn.sharafdg.com/cdn-cgi/image/width=600,height=600,fit=pad/images/IPHONE14PROMAX_gold_1?1705054846"
          },
          "amount": {
            "type": "integer",
            "example": 1
          },
          "price": {
            "type": "number",
            "example": 1499
          }
        }
      },
      "UpdateProduct": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "iPhone 14 Pro Max"
          },
          "description": {
            "type": "string",
            "example": "Gold 512 GB"
          },
          "image": {
            "type": "string",
            "example": "https://pimcdn.sharafdg.com/cdn-cgi/image/width=600,height=600,fit=pad/images/IPHONE14PROMAX_gold_1?1705054846"
          },
          "amount": {
            "type": "integer",
            "example": 1
          },
          "price": {
            "type": "number",
            "example": 1499
          }
        }
      },
      "ProductUpdated": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "iPhone 14 Pro Max"
          },
          "description": {
            "type": "string",
            "example": "Gold 1 TB"
          },
          "image": {
            "type": "string",
            "example": "https://pimcdn.sharafdg.com/cdn-cgi/image/width=600,height=600,fit=pad/images/IPHONE14PROMAX_gold_1?1705054846"
          },
          "amount": {
            "type": "integer",
            "example": 1
          },
          "price": {
            "type": "number",
            "example": 1699
          }
        }
      },
      "ProductDeleted": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Product deleted"
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "object",
            "properties": {
              "address": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "example": "Santa Fe Norte"
                  },
                  "city": {
                    "type": "string",
                    "example": "Caracas"
                  },
                  "country": {
                    "type": "string",
                    "example": "Venezuela"
                  }
                }
              }
            }
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "example": "araujo.j99@gmail.com"
              },
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 3
              },
              "name": {
                "type": "string",
                "example": "Juan"
              },
              "lastname": {
                "type": "string",
                "example": "Araujo"
              }
            }
          },
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMTMwMTM3MiwianRpIjoiZDhiNGFjZGUtNWE1Ny00MGM3LWIzOTktNmMwM2IzYjRkNDgwIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6InNlYmFzdGlhbmNhc3Ryb3JhamJlQGdtYWlsLmNvbSIsIm5iZiI6MTcxMTMwMTM3MiwiZXhwIjoxNzExMzg3NzcyfQ.SqAJQPanvmJPR1JpcnJpggif6cvMd_WJO_j5yxVzzxE"
          }
        }
      },
      "CustomerRequiredBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Juan"
          },
          "lastname": {
            "type": "string",
            "example": "Araujo"
          },
          "email": {
            "type": "string",
            "example": "araujo.j99@gmail.com"
          },
          "password": {
            "type": "string",
            "example": 123456
          },
          "country": {
            "type": "string",
            "example": "Venezuela"
          },
          "city": {
            "type": "string",
            "example": "Caracas"
          },
          "address": {
            "type": "string",
            "example": "Santa Fe Norte"
          }
        }
      },
      "Driver": {
        "type": "object",
        "properties": {
          "driver": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 4
              },
              "name": {
                "type": "string",
                "example": "Pedro"
              },
              "lastname": {
                "type": "string",
                "example": "Perez"
              },
              "email": {
                "type": "string",
                "example": "pedroperez@gmail.com"
              }
            }
          },
          "serial_plate": {
            "type": "string",
            "example": "AA369XA"
          }
        }
      },
      "DriverRequiredBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Juan"
          },
          "lastname": {
            "type": "string",
            "example": "Araujo"
          },
          "email": {
            "type": "string",
            "example": "araujo.j99@gmail.com"
          },
          "password": {
            "type": "string",
            "example": 123456
          },
          "serial_plate": {
            "type": "string",
            "example": "AA369XA"
          }
        }
      },
      "Orders": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Order"
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "customer_address": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "country": {
                "type": "string",
                "example": "Venezuela"
              },
              "city": {
                "type": "string",
                "example": "Caracas"
              },
              "address": {
                "type": "string",
                "example": "Santa Fe Norte"
              }
            }
          },
          "id": {
            "type": "integer",
            "example": 19
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "OrderRequiredBody": {
        "type": "object",
        "properties": {
          "delivery": {
            "type": "string",
            "example": "pedroperez@gmail.com"
          },
          "customer": {
            "type": "string",
            "example": "araujo.j99@gmail.com"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product/properties/id"
            }
          }
        }
      },
      "GetUserErr404": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User not found"
          }
        }
      },
      "UpdateUserErr404": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User pedroperez@gmail.com doesn't exists"
          }
        }
      },
      "DeleteUserErr404": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User not found"
          }
        }
      },
      "TokenErr401": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Incorrect password"
          }
        }
      },
      "CreateProductErr400": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Request body missing name or price"
          }
        }
      },
      "CreateProductErr500": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "An error occured during product creation"
          }
        }
      },
      "DeleteProductErr404": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Product not found"
          }
        }
      },
      "GetOrdersErr500": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Failed to retrive orders"
          }
        }
      },
      "CreateOrderErr500": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Something is missing or incorrect"
          }
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}